# This is for debugging in vanilla Python - with no Nuke...
try:
	import nuke
except ImportError:
	nuke = None
import sys
import os
import shutil
import tag_data_file
# Rename the imported utils class from the tag_data_file...
TagsFileUtils = tag_data_file.TagsFileUtils

# Make a global variable for self.args_file_path in the main module.
# This is necessary because we create an instance of the class twice: once for the beforeRender callback - the create_args_file method - but it gets destroyed afterward, along with any self.xxxxx variables we created.
# Then, we create another instance of the class for the afterFrameRender callback - the tag_images method. When we run the second instance, it doesn't know about the "self.args_file_path" variable we already created.
# So, by storing it in the module at the end of the first method, we can retrieve it before running the second method...
_Global_args_file_path = None


class TagImages(object):
	
	''' The TagImages class uses the exiftool metadata utility to add XMP style metadata to images. These data tags may be viewed in Photoshop.
	Two methods are used as callbacks in a Nuke Write node's Python tab: The first method, create_args_file(), operates as a beforeRender
	callback and generates a text file containing tag arguments for exiftool to use. On a Nuke Write node, add "TagImages.TagImages().create_args_file()"
	in the Write node's Python tab in the "before render" field. The second method, tag_images(), operates as an afterFrameRender callback.
	On the same Nuke Write node, add "TagImages.TagImages().tag_images()" in the Write node's Python tab in the "after each frame" field.
	For further info on exiftool, go to --> http://www.sno.phy.queensu.ca/~phil/exiftool/
	
	WARNING: Metadata tagging for Photoshop does *not* work with PNG Files! It is recommended to use TIF files. Other formats may work, but have not been tested...
	
	Created by Rich Bobo - 04/04/2014
	richbobo@mac.com
	http://richbobo.com
	'''	
	
	def __init__(self):
		
		# Rename the imported utils class for clarity...
		self.args = TagsFileUtils()
		
		# Rename the write_args_file function for simplicity...
		self.write_args_file = self.args.write_args_file		
		
		# Get the Write node's render output pathname from the file knob...
		self.node_file_path = nuke.filename(nuke.thisNode())
		# Get OS-corrected slashes in the pathname - forward vs. backward...
		self.node_file_path = os.path.realpath( self.node_file_path )
		
		# This is the directory for the rendered images...
		self.render_dir = os.path.dirname(self.node_file_path)
		
		# Get the name of the Nuke script and use it as part of the temp file name...
		self.script_name = os.path.basename(nuke.root().name())
		self.name_parts = os.path.splitext(self.script_name)
		self.name = self.name_parts[0]
		# Name of the args file has the Nuke script name appended to avoid different renders writing to the same filename...
		self.args_filename = "TagImages" + "_" + self.name
		
	def create_args_file(self):
		
		''' Function that writes the temp file containing metadata tag arguments for the exiftool command.'''
		
		global _Global_args_file_path

		# Get the returned file path from the saved file...
		self.args_file_path = self.write_args_file(file_name=self.args_filename, args_list=self.args)
		
		if self.args_file_path:
			#print "Args file saved to: ", self.args_file_path
			pass
		else:
			print "ERROR: Tags file not saved!"
			if nuke.GUI:	
				nuke.critical("Tags file not saved!\n Something went wrong with the image metadata tagging!")
			return	
		
		# Store the value in a global variable, so we can retrieve it when tag_images runs.
		_Global_args_file_path = self.args_file_path
		
	def tag_images(self, current_frame_path=None):
		
		''' Function that executes the exiftool command, using the temp file containing metadata tag arguments created by create_args_file.'''
		
		global _Global_args_file_path
		
		# Retrieve the stored value that was created when create_args_file ran...
		self.args_file_path =_Global_args_file_path
		
		# Get the path for the current frame we're rendering...
		if current_frame_path is None:
			self.current_frame_path = nuke.filename(nuke.thisNode(),nuke.REPLACE)
		else:
			self.current_frame_path = current_frame_path

		##self.current_frame_path = ConfigCompBuilder.TrimViewGenerator.TrimViewGenerator().constructFilePath()
		
		
		# Check for the current OS...
		# Set which executable flavor to use...
		if os.name == 'nt':
			home_dir = os.environ.get('HOMEPATH')
			sep = '\\'
			# Operates on a single frame. This works well on the farm.
			exec_string = '"\\\\blue\\arc\\Common\\SYSENV\\Global\\exiftool.exe" -@ ' + self.args_file_path + " " + self.current_frame_path
			#### TEST for writing metadata to PNG files, using the PNGEarlyXMP flag... Not working as of 04-17-04.
			##exec_string = '"\\\\blue\\arc\\Common\\SYSENV\\Global\\exiftool.exe" -api PNGEarlyXMP -@ ' + self.args_file_path + " " + self.current_frame_path
		elif os.name == 'posix':
			home_dir = os.environ.get('HOME')
			# If I'm at home testing, this is the binary location... Also would be for a local Mac OS X system - just wouldn't need the home_dir test, of course...
			if home_dir == "/Users/richbobo":
				sep = '/'
				exec_string = "/usr/bin/exiftool -@ " + self.args_file_path + " " + self.current_frame_path
				#print "self.args_file_path -------------------->>>>>>>", self.args_file_path
				#print "self.current_frame_path ----------------->>>>>>>", self.current_frame_path
				#print "exec_string ------------->>>>>>>", exec_string
			else:
				sep = '/'
				# Operates on a single frame. This works well on the farm.
				exec_string = '"\\\\blue\\arc\\Common\\SYSENV\\Global\\exiftool" -@ ' + self.args_file_path + " " + self.current_frame_path
	
		# Run the exiftool command on the rendered files, with arguments supplied by self.args_file_path...
		#try:
			#os.system(exec_string)
		if os.path.exists(self.current_frame_path):
			if not os.path.exists(self.current_frame_path+"_original"):
				os.system(exec_string)
		#except:
			##print "ERROR: Metadata Tagging Failed!\n Something went wrong with the image metadata tagging!"
			##if nuke.GUI:	
			##	nuke.critical("Metadata Tagging Failed!\n Something went wrong with the image metadata tagging!")
			#return
			#pass
	
		# Remove the duplicate xxxxxx.xxx_original" files that exiftool creates as backups...
		#root, dirs, files=os.walk(self.render_dir).next()
		###for filename in os.listdir(self.render_dir):
		#for filename in files:
			#filepath = os.path.join(root, filename)
			#print filepath
			#if "_original" in filename:
				#try:
					#shutil.rmtree(filepath)
				#except OSError:
					#try:
						#os.remove(filepath)
					#except:
						#print "Could not remove file. " + filepath
					
		## Check to see if we really removed all of the duplicates...
		###for filename in os.listdir(self.render_dir):
		#for filename in files:
			#filepath = os.path.join(root, filename)
			#if "_original" in filename:
				###print "INFO: Tagging probably suceeded, but the removal of duplicate images failed.\n You will have to remove any images ending with _original, yourself..."
				###if nuke.GUI:	
				###	nuke.message("INFO: Tagging probably suceeded, but the removal of duplicate images failed.\n You will have to remove any images ending with _original, yourself...")
				#pass
		return True
			