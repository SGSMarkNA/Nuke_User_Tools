// bring application forward...app.bringToFront();// =======================================================// Check for the OS we're running on...os = $.os.toLowerCase().indexOf('mac') >= 0 ? "MAC": "WINDOWS";//alert(os);// =======================================================// Where to find various files on the server:// Path to server...var libPath = $.getenv("AW_COMMON_UTILITIES");// Path to Color Settings...var ColorSettingsPath = (libPath + "/Photoshop/AW_Nuke_Tools/Color_Settings");// Color settings files...//var ACES_SETTINGS = (ColorSettingsPath + "/ACES-CG-Linear_NO_PROFILE_PROMPTS.csf" );var sRGB_SETTINGS = (ColorSettingsPath + "/sRGB.csf" );//var ADOBE_RGB_1998_SETTINGS = (ColorSettingsPath + "/ADOBE_RGB_1998.csf" );//var REC709_SETTINGS = (ColorSettingsPath + "/REC709.csf" );//var REC2020_SETTINGS = (ColorSettingsPath + "/REC2020.csf" );//======================================================= // Location of Data file Location File, generated by python script...if(os == "WINDOWS") {	var DataFileLocationFile = new File($.getenv("TEMP") + "\\" + ".nuke\\NukePSD\\data_file_location.txt");} else if (os == "MAC") {	var DataFileLocationFile = new File($.getenv("HOME") + "/" + ".nuke/NukePSD/data_file_location.txt");}//alert("DataFileLocationFile -->" + DataFileLocationFile);// =======================================================// Set DELETE_FILES_POST_PROCESS to False as a default. If the PSD files are post-processed,// the value can be set to True in the DataFileLocationFile...//var DELETE_FILES_POST_PROCESS = "False"// Open and read from the file to assign DATA_FILE_LOCATION script variable...DataFileLocationFile.open('r');var str = "";while (!DataFileLocationFile.eof) {	str = DataFileLocationFile.readln() + "\n";	eval(str);}DataFileLocationFile.close();//alert("DATA_FILE_LOCATION -->" + DATA_FILE_LOCATION);//alert("DELETE_FILES_POST_PROCESS -->" + DELETE_FILES_POST_PROCESS);// =======================================================// Make new file object to read saved data values...var DataFile = new File(DATA_FILE_LOCATION);//alert("DataFile -->" + DataFile);// Open and read lines from the data file and assign script variables...DataFile.open('r');var str = "";while (!DataFile.eof) {	str = DataFile.readln() + "\n";	eval(str);}DataFile.close();// alert("PNG_FOLDER -->" + PNG_FOLDER);// alert("LAYER_FOLDERS -->" + LAYER_FOLDERS);// alert("COLOR_SETTINGS -->" + COLOR_SETTINGS);// alert("PSD_FileName -->" + PSD_FileName);// alert("NUM_FRAMES -->" + NUM_FRAMES);// alert("FIRST_FRAME -->" + FIRST_FRAME);// alert("LAST_FRAME -->" + LAST_FRAME);// alert("DELETE_FILES -->" + DELETE_FILES);// alert("MULTI_VIEW -->" + MULTI_VIEW);// alert("VIEWS_FOLDERS -->" + VIEWS_FOLDERS);// alert("LAYERNAME_REPLACEMENT -->" + LAYERNAME_REPLACEMENT);// =======================================================// Set to Photoshop units to use pixels...app.preferences.rulerUnits = Units.PIXELSapp.preferences.typeUnits = TypeUnits.PIXELS// =======================================================// Display no dialogs...app.displayDialogs = DialogModes.NO// =======================================================// Load saved Photoshop Color Settings...function loadColorSettings( file ) {       var desc = new ActionDescriptor();          var ref = new ActionReference();          ref.putProperty( charIDToTypeID('Prpr'), stringIDToTypeID('colorSettings') );          ref.putEnumerated( charIDToTypeID('capp'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );      desc.putReference( charIDToTypeID('null'), ref );          var fileDesc = new ActionDescriptor();          fileDesc.putPath( charIDToTypeID('Usng'), file );      desc.putObject( charIDToTypeID('T   '), stringIDToTypeID('colorSettings'), fileDesc );      executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  }; var FileName = new File (COLOR_SETTINGS); loadColorSettings( FileName );//alert("Loaded " + COLOR_SETTINGS + " into WORKING Color Settings...");function load_sRGB_ColorSettings( file ) {       var desc = new ActionDescriptor();          var ref = new ActionReference();          ref.putProperty( charIDToTypeID('Prpr'), stringIDToTypeID('colorSettings') );          ref.putEnumerated( charIDToTypeID('capp'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );      desc.putReference( charIDToTypeID('null'), ref );          var fileDesc = new ActionDescriptor();          fileDesc.putPath( charIDToTypeID('Usng'), file );      desc.putObject( charIDToTypeID('T   '), stringIDToTypeID('colorSettings'), fileDesc );      executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  }; // =======================================================// Build the PSD file and save it...function png_to_psd (layer_path,LAYER_FOLDERS,IMAGE_ARRAY,prefs,PSD_FileName, LAYERNAME_REPLACEMENT, INDEX) {	// Check if there are any pngs... if not, exit.	if (IMAGE_ARRAY.length == 0) {return 0}	// Create a new document...	var newDoc = documents.add(300, 300, 72, 'Imported Layers', NewDocumentMode.RGB, DocumentFill.TRANSPARENT, 1);	var newLayer = newDoc.activeLayer;	var pnglayers = new Array (); // Array for holding layer info...	// Loop through all files in the source folder...	for (var i = 0; i < IMAGE_ARRAY.length; i++) {		// Get the current view folder name if we are processing multi-views...		if (MULTI_VIEW == "True") {			//alert("IMAGE_ARRAY[i] --> " + IMAGE_ARRAY[i]);			var path = IMAGE_ARRAY[i];			//alert("path --> " + path);			var path_string = new String(path);			//alert("path_string --> " + path_string);			var path_segs = path_string.split( '/' );			//alert("path_segs --> " + path_segs);			viewname = path_segs.slice(-3)[0];			//alert("viewname --> " + viewname);		}		// open document		var doc = open(IMAGE_ARRAY[i]);		// Get document name and remove file extension...		var name = doc.name;		if (prefs.removeFileExtensions) {			name = name.replace(/(?:\.[^.]*$|$)/, '');			//alert("name --> " + name);		}		// Convert to RGB; convert to 8-bpc; merge visible...		doc.changeMode(ChangeMode.RGB);		doc.bitsPerChannel = BitsPerChannelType.EIGHT;		doc.artLayers.add();		doc.mergeVisibleLayers();		// Rename layer...		var layer = doc.activeLayer;		// Replace layername with view name, if LAYERNAME_REPLACEMENT is set...		if (LAYERNAME_REPLACEMENT != 'none') {			//alert('True --> ' + LAYERNAME_REPLACEMENT);			if (name == LAYERNAME_REPLACEMENT + '_' + INDEX) {				//alert('Replace name -->' + name);				layer.name = viewname + '_' + INDEX;			}			// Just use the value of name...			else {layer.name = name;}		}		else {layer.name = name;}		//alert('The final layer name --> ' + layer.name);		// Duplicate to new document...		layer.duplicate(newDoc, ElementPlacement.PLACEATBEGINNING);				// Add layer name to  list...		var namesplit = (name.split("_")); // Seperate file name into an array...		pnglayers.push(namesplit.join("_")); // Add layer name to pnglayers...		// Close imported document...		doc.close(SaveOptions.DONOTSAVECHANGES);	}		// Reveal and trim to fit all layers...	newDoc.revealAll();	newDoc.trim(TrimType.TRANSPARENT, true, true, true, true);		var PixCount = newDoc.width.as('px') * newDoc.height.as('px');	var layers = activeDocument.artLayers;	var groups = activeDocument.layerSets;	if (layers.length > 1) {layers.getByName("Layer 1").remove()};	// For views, replace the PSD_FileName with the view name...	if (MULTI_VIEW == "True") {		var PSD_FileName_segs = PSD_FileName.split( '/' );		PSD_FileName_segs.splice(-1, 1);		//alert("PSD_FileName_segs --> " + PSD_FileName_segs);		var main_path = PSD_FileName_segs.join('/');		//alert("main_path --> " + main_path);		var view_FileName = main_path + '/' + viewname;		//alert("view_FileName --> " + view_FileName);		saveName = new File(view_FileName + "_" + INDEX + ".psd");		//alert("saveName --> " + saveName);	} else {		// For single views, use what the user types in the PSD Filename field...		saveName = new File(PSD_FileName + "_" + INDEX + ".psd");	}		var psd_Opt = new PhotoshopSaveOptions();    //psd_Opt.layers = true; // Preserve layers.    psd_Opt.embedColorProfile = true; // Preserve color profile.    //psd_Opt.annotations = true; // Preserve annonations.    //psd_Opt.alphaChannels = true; // Preserve alpha channels.    //psd_Opt.spotColors = true; // Preserve spot colors.	newDoc.saveAs(saveName, psd_Opt);	newDoc.close();	return saveName	}// =======================================================// Set some prefs for Photoshop and run the png_to_psd function that assembles and saves the file...function single_psd (layer_path,PSD_FileName,IMAGE_ARRAY) {	// User settings...	var prefs = new Object();	prefs.sourceFolder         = layer_path;  // runs	prefs.removeFileExtensions = true;        // remove filename extensions for imported layers (default: true)	prefs.savePrompt           = false;       // display save prompt after import is complete (default: false)	prefs.closeAfterSave       = false;       // close import document after saving (default: false)	// assemble pngs to psd	saveName = png_to_psd(layer_path,LAYER_FOLDERS,IMAGE_ARRAY,prefs,PSD_FileName, LAYERNAME_REPLACEMENT, INDEX);		return saveName	}// =======================================================// Multi-views: Get rid of the PNG_FOLDER and DataFile when we're done making the PSD file.../*function views_remove_png_files (VIEWS_FOLDERS, LAYER_FOLDERS, PNG_FOLDER, DataFile) {	for (var m=0; m < VIEWS_FOLDERS.length; m++) {		//alert(m);		var viewfolder = VIEWS_FOLDERS[m];		//alert("viewfolder --> " + viewfolder);			for (var j=0; j < LAYER_FOLDERS.length; j++) {		    if (LAYER_FOLDERS[j]) {		    	//alert('LAYER_FOLDERS loop...');		        var layerfolder = LAYER_FOLDERS[j];		        //alert("layerfolder --> " + layerfolder);		        //alert("PNG_FOLDER --> " + PNG_FOLDER);		        var view_path = PNG_FOLDER + '/' + viewfolder;		        //alert("view_path --> " + view_path);		        var layer_path = PNG_FOLDER + '/' + viewfolder + '/' + layerfolder;		        //alert("layer_path --> " + layer_path);				if(os == "WINDOWS") {					var layer_path = new Folder(layer_path.replace(/\//g, "\\\\"));				} else if (os == "MAC") {					var layer_path = new Folder(layer_path);					//alert("Folder Object: layer_path -->" + layer_path);				}			    if(layer_path.exists) {			    	//alert("Yes, layer_path exists.");			        var removeFiles = layer_path.getFiles();			        //alert("removeFiles -->" + removeFiles); 			        for(var a=0; a < removeFiles.length; a++) {  			            removeFiles[a].remove();  			        }			    layer_path.remove();   			    }			    if(os == "WINDOWS") {					var view_path = new Folder(view_path.replace(/\//g, "\\\\"));			    } else if (os == "MAC") {					var view_path = new Folder(view_path);					//alert("Folder Object: view_path -->" + view_path);				}			    if(view_path.exists) {			    	//alert("Yes, view_path exists.");			    	view_path.remove();			    }			}		}	}	if(os == "WINDOWS") {		var PNG_FOLDER = new Folder(PNG_FOLDER.replace(/\//g, "\\\\"));	} else if (os == "MAC") {		var PNG_FOLDER = new Folder(PNG_FOLDER);		//alert("Folder Object: PNG_FOLDER -->" + PNG_FOLDER);	}	DataFile.remove();	PNG_FOLDER.remove();}*/// =======================================================// Multi-views: Run the function for renders with multiple views...function views_main() {	//alert('RUNNING views_main...');	for (var m=0; m < VIEWS_FOLDERS.length; m++) {		//alert(m);		var viewfolder = VIEWS_FOLDERS[m];		//alert("viewfolder --> " + viewfolder);		INDEX = (FIRST_FRAME.split(".")[0]);	    INDEX = (INDEX.split("_"));	    INDEX = (INDEX [INDEX.length -1]);	    //alert(INDEX);	    for (var i=0; i < NUM_FRAMES; i++) {	    	 //alert('NUM_FRAMES loop...');	    	 var IMAGE_PATHS = [];	    	 var IMAGE_ARRAY = new Array ();	        for (var j=0; j < LAYER_FOLDERS.length; j++) {	            if (LAYER_FOLDERS[j]) {	            	//alert('LAYER_FOLDERS loop...');	                var layerfolder = LAYER_FOLDERS[j];	                //alert("layerfolder --> " + layerfolder);	                var layer_path = PNG_FOLDER + '/' + viewfolder + '/' + layerfolder;	                //alert("layer_path --> " + layer_path);	                var image_path = layer_path + '/' + layerfolder + '_' + INDEX + '.png';	                //alert("image_path --> " + image_path);	                IMAGE_PATHS.push(image_path);	            }	            //alert("IMAGE_PATHS --> " + IMAGE_PATHS);	        }	        for (var k=0; k < IMAGE_PATHS.length; k++) {	        	//alert('IMAGE_PATHS loop...');	        	if (IMAGE_PATHS[k]) {		        	var image_file = new File(IMAGE_PATHS[k]);		        	//alert("image_file --> " + image_file);		        	IMAGE_ARRAY.push(image_file);			    }			    //alert("IMAGE_ARRAY --> " + IMAGE_ARRAY);			}			//alert('Start single_psd...');			single_psd(layer_path,PSD_FileName,IMAGE_ARRAY)			// Increment INDEX number...			// Format for four digits padding.			var ZEROS = "0000";			// Convert to number so we can increment it...			INDEX = Number(INDEX);			// Increment...			INDEX++			// Convert back to string, so we can add padding...			INDEX = INDEX.toString();			// Add leading zeroes...			INDEX = ZEROS.substr(0, ZEROS.length - INDEX.length) + INDEX;			//alert(INDEX);		}	}	// Get rid of the png files and data file when we're done making the PSD file...	//alert("DELETE_FILES --> " + DELETE_FILES);	//alert("DELETE_FILES_POST_PROCESS --> " + DELETE_FILES_POST_PROCESS);	//if (DELETE_FILES == "True") {		//views_remove_png_files(VIEWS_FOLDERS, LAYER_FOLDERS, PNG_FOLDER, DataFile);	//} 	//else if (DELETE_FILES_POST_PROCESS == "True") {		//views_remove_png_files(VIEWS_FOLDERS, LAYER_FOLDERS, PNG_FOLDER, DataFile);	//}	var FileName = new File (sRGB_SETTINGS); 	load_sRGB_ColorSettings( FileName );	//alert("Loaded " + sRGB_SETTINGS + " into WORKING Color Settings...");	////////////////////////////////////////////////////////////////////////////////////////////////////////////	if(os == "WINDOWS") {		var ScriptCompleteFile = new File($.getenv("TEMP") + "\\" + ".nuke\\NukePSD\\jsx_script_status.txt");	} else if (os == "MAC") {		var ScriptCompleteFile = new File($.getenv("HOME") + "/" + ".nuke/NukePSD/jsx_script_status.txt");	}	ScriptCompleteFile.open('w');	ScriptCompleteFile.writeln("Complete.");	ScriptCompleteFile.close();	////////////////////////////////////////////////////////////////////////////////////////////////////////////	photoshop.quit();	return 0;}// =======================================================// Single view: Get rid of the PNG_FOLDER and DataFile when we're done making the PSD file.../*function remove_png_files (LAYER_FOLDERS, PNG_FOLDER, DataFile) {	for (var j=0; j < LAYER_FOLDERS.length; j++) {	    if (LAYER_FOLDERS[j]) {	    	//alert('LAYER_FOLDERS loop...');	        var layerfolder = LAYER_FOLDERS[j];	        //alert("layerfolder --> " + layerfolder);	        //alert("PNG_FOLDER --> " + PNG_FOLDER);	        var layer_path = PNG_FOLDER + '/' + layerfolder;	        //alert("layer_path --> " + layer_path);			if(os == "WINDOWS") {				var layer_path = new Folder(layer_path.replace(/\//g, "\\\\"));			} else if (os == "MAC") {				var layer_path = new Folder(layer_path);				//alert("Folder Object: layer_path -->" + layer_path);			}		    if(layer_path.exists) {		    	//alert("Yes, layer_path exists.");		        var removeFiles = layer_path.getFiles();		        //alert("removeFiles -->" + removeFiles); 		        for(var a=0; a < removeFiles.length; a++) {  		            removeFiles[a].remove();  		        }		    layer_path.remove();   		    } 		}	}	if(os == "WINDOWS") {		var PNG_FOLDER = new Folder(PNG_FOLDER.replace(/\//g, "\\\\"));	} else if (os == "MAC") {		var PNG_FOLDER = new Folder(PNG_FOLDER);		//alert("Folder Object: PNG_FOLDER -->" + PNG_FOLDER);	}	DataFile.remove();	PNG_FOLDER.remove();}*/// =======================================================// Single-view: Run the function for single ("main") view renders...function main() {	//alert('RUNNING main...');    INDEX = (FIRST_FRAME.split(".")[0]);    INDEX = (INDEX.split("_"));    INDEX = (INDEX [INDEX.length -1]);    //alert(INDEX);    for (var i=0; i < NUM_FRAMES; i++) {    	 //alert('NUM_FRAMES loop...');		var IMAGE_PATHS = [];		var IMAGE_ARRAY = new Array ();        for (var j=0; j < LAYER_FOLDERS.length; j++) {            if (LAYER_FOLDERS[j]) {            	//alert('LAYER_FOLDERS loop...');                var layerfolder = LAYER_FOLDERS[j];                //alert("layerfolder --> " + layerfolder);                var layer_path = PNG_FOLDER + '/' + layerfolder;                //alert("layer_path --> " + layer_path);                var image_path = layer_path + '/' + layerfolder + '_' + INDEX + '.png';                //alert("image_path --> " + image_path);                IMAGE_PATHS.push(image_path);            }            //alert("IMAGE_PATHS --> " + IMAGE_PATHS);        }        for (var k=0; k < IMAGE_PATHS.length; k++) {        	//alert('IMAGE_PATHS loop...');        	if (IMAGE_PATHS[k]) {	        	var image_file = new File(IMAGE_PATHS[k]);	        	//alert("image_file --> " + image_file);	        	IMAGE_ARRAY.push(image_file);		    }		    //alert("IMAGE_ARRAY --> " + IMAGE_ARRAY);		}		//alert('Start single_psd...');		single_psd(layer_path,PSD_FileName,IMAGE_ARRAY)		// Increment INDEX number...		// Format for four digits padding.		var ZEROS = "0000";		// Convert to number so we can increment it...		INDEX = Number(INDEX);		// Increment...		INDEX++		// Convert back to string, so we can use hack to add padding...		INDEX = INDEX.toString();		// Add needed number of leading zeroes...		INDEX = ZEROS.substr(0, ZEROS.length - INDEX.length) + INDEX;		//alert(INDEX);	}	// Get rid of the png files and data file when we're done making the PSD file...	//alert("DELETE_FILES --> " + DELETE_FILES);	//alert("DELETE_FILES_POST_PROCESS --> " + DELETE_FILES_POST_PROCESS);	//if (DELETE_FILES == "True") {		//remove_png_files(LAYER_FOLDERS, PNG_FOLDER, DataFile);	//} 	//else if (DELETE_FILES_POST_PROCESS == "True") {		//remove_png_files(LAYER_FOLDERS, PNG_FOLDER, DataFile);	//}	var FileName = new File (sRGB_SETTINGS); 	load_sRGB_ColorSettings( FileName );	//alert("Loaded " + sRGB_SETTINGS + " into WORKING Color Settings...");	////////////////////////////////////////////////////////////////////////////////////////////////////////////	if(os == "WINDOWS") {		var ScriptCompleteFile = new File($.getenv("TEMP") + "\\" + ".nuke\\NukePSD\\jsx_script_status.txt");	} else if (os == "MAC") {		var ScriptCompleteFile = new File($.getenv("HOME") + "/" + ".nuke/NukePSD/jsx_script_status.txt");	}	ScriptCompleteFile.open('w');	ScriptCompleteFile.writeln("Complete.");	ScriptCompleteFile.close();	////////////////////////////////////////////////////////////////////////////////////////////////////////////	photoshop.quit();	return 0;}// =======================================================// Decide which main function to run, based on the MULTI_VIEW value...function run_main() {	if (MULTI_VIEW == "False") {		main();	} else if (MULTI_VIEW == "True") {		views_main();	}}// =======================================================// Run it...run_main();