
// =======================================================
// Check for the OS we're on...
os = $.os.toLowerCase().indexOf('mac') >= 0 ? "MAC": "WINDOWS";
//alert(os);

// =======================================================
// Where to find various files on the server:
// Path to server...
var libPath = $.getenv("AW_COMMON_UTILITIES");
// Path to Color Settings...
var ColorSettingsPath = (libPath + "/Photoshop/AW_Nuke_Tools/Color_Settings");
// Color settings files...
var ACES_SETTINGS = (ColorSettingsPath + "/ACES-CG-Linear_NO_PROFILE_PROMPTS.csf" );
var sRGB_SETTINGS = (ColorSettingsPath + "/sRGB.csf" );

// =======================================================
// Data file, generated by python script:
if(os == "WINDOWS")
	//var DataFile = new File("C:\\Users\\rbobo\\Box Sync\\CODE_aw_projects (Rich.Bobo@armstrong-white.com)\\aw_projects\\NukePSD\\JavaScript\\Photoshop\\data.txt");
	var DataFile = new File($.getenv("TEMP") + "\\" + ".nuke\\NukePSD\\NukePSD_Data.txt");
else if (os == "MAC")
	var DataFile = new File($.getenv("HOME") + "/" + ".nuke/NukePSD/NukePSD_Data.txt");
//alert(DataFile);
// Open and read lines from the data file which assign script variables for PNG_FOLDER, Layer_Names and PSD_FileName...
DataFile.open('r');
var str = "";
while (!DataFile.eof){
	str = DataFile.readln() + "\n";
	eval(str);
}
DataFile.close();
//alert(PNG_FOLDER);
alert(Layer_Names);
//alert(PSD_FileName);
//alert(Nuke_Frame);
var PSDName = (PSD_FileName + "_" + Nuke_Frame);
//alert(PSDName);

// =======================================================
// Set to use pixels...
app.preferences.rulerUnits = Units.PIXELS
app.preferences.typeUnits = TypeUnits.PIXELS

// =======================================================
// Display no dialogs...
app.displayDialogs = DialogModes.NO

// =======================================================
// Load saved Photoshop Color Settings...
function loadColorSettings( file ) {  
     var desc = new ActionDescriptor();  
        var ref = new ActionReference();  
        ref.putProperty( charIDToTypeID('Prpr'), stringIDToTypeID('colorSettings') );  
        ref.putEnumerated( charIDToTypeID('capp'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );  
    desc.putReference( charIDToTypeID('null'), ref );  
        var fileDesc = new ActionDescriptor();  
        fileDesc.putPath( charIDToTypeID('Usng'), file );  
    desc.putObject( charIDToTypeID('T   '), stringIDToTypeID('colorSettings'), fileDesc );  
    executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  
}; 
// Run it.
var FileName = new File (sRGB_SETTINGS); 
loadColorSettings( FileName );
//alert("Loaded 'sRGB.csf' into WORKING Color Settings...");

// =======================================================
function png_loop (PNG_FOLDER){
	png_files = (Folder(PNG_FOLDER)).getFiles("*.png")
	alert(png_files);
	return png_files
	}

// =======================================================
function single_psd (PNG_FOLDER,PSD_FileName){
	// user settings
	var prefs = new Object();
	prefs.sourceFolder         = PNG_FOLDER;  // runs
	prefs.removeFileExtensions = true; // remove filename extensions for imported layers (default: true)
	prefs.savePrompt           = false; // display save prompt after import is complete (default: false)
	prefs.closeAfterSave       = false; // close import document after saving (default: false)

	// get a list of files
	var fileArray = png_loop(PNG_FOLDER)
	//alert ("fileArray -->" + fileArray);
	
	// assemble pngs to psd
	saveName = png_to_psd(PNG_FOLDER,Layer_Names,fileArray,prefs,PSD_FileName)
    //alert("saveName -->" + saveName);
	
	return saveName
	}


// =======================================================
function png_to_psd (PNG_FOLDER,Layer_Names,fileArray,prefs,PSD_FileName){
	// Check if there are any pngs... if not, exit.
	if (fileArray.length == 0) {return 0}
	
	// Create a new document...
	var newDoc = documents.add(300, 300, 72, 'Imported Layers', NewDocumentMode.RGB, DocumentFill.TRANSPARENT, 1);
	var newLayer = newDoc.activeLayer;
	var pnglayers = new Array (); // Array for holding layer info...

	// Loop through all files in the source folder...
	for (var i = 0; i < fileArray.length; i++) {
		// open document
		var doc = open(fileArray[i]);

		// Get document name and remove file extension...
		var name = doc.name;
		if (prefs.removeFileExtensions) {
			name = name.replace(/(?:\.[^.]*$|$)/, '');
		}

		// Convert to RGB; convert to 8-bpc; merge visible...
		doc.changeMode(ChangeMode.RGB);
		doc.bitsPerChannel = BitsPerChannelType.EIGHT;
		doc.artLayers.add();
		doc.mergeVisibleLayers();

		// Rename layer; duplicate to new document...
		var layer = doc.activeLayer;
		layer.name = name;
		layer.duplicate(newDoc, ElementPlacement.PLACEATBEGINNING);
		
		// Add layer name to  list...
		var namesplit = (name.split("_")); // Seperate file name into an array...
		pnglayers.push(namesplit.join("_")); // Add layer name to pnglayers...

		// Close imported document...
		doc.close(SaveOptions.DONOTSAVECHANGES);
	}	

	// Reveal and trim to fit all layers...
	newDoc.revealAll();
	newDoc.trim(TrimType.TRANSPARENT, true, true, true, true);
	
	var PixCount = newDoc.width.as('px') * newDoc.height.as('px');
	var layers = activeDocument.artLayers;
	var groups = activeDocument.layerSets;

	if (layers.length > 1){layers.getByName("Layer 1").remove()};
	
	// =======================================================
	// This takes the list of Layer_Names we got from the DataFile and rearranges the order of the photoshop layers to match...
	for (var i = 0; i < Layer_Names.length; i++) {
		///alert(Layer_Names[i]);
		layer = layers.getByName(Layer_Names[i]);
		layer.move(newDoc, ElementPlacement.PLACEATBEGINNING);
	}
	// =======================================================

	// Save file and close...
	saveName = new File(PSDName + ".psd");
	alert(saveName);
	newDoc.saveAs(saveName, new PhotoshopSaveOptions() );
	newDoc.close();

	return saveName
	}


// Get rid of the PNG_FOLDER when we're done making the PSD file...
function remove_png_files (PNG_FOLDER){
	var PNG_FOLDER = new Folder(PNG_FOLDER.replace(/\//g, "\\\\"));
	//alert("PNG_FOLDER -->" + PNG_FOLDER);
    if(PNG_FOLDER.exists){
    	//alert("Yes, it does.");
        var removeFiles = PNG_FOLDER.getFiles();
        alert("removeFiles -->" + removeFiles); 
        for(var a=0; a < removeFiles.length; a++){  
            removeFiles[a].remove();  
        } 
        //PNG_FOLDER.remove();  
    }
    else{
    	alert("Nope.");
    }
}


// =======================================================
function main(){
    single_psd(PNG_FOLDER,PSD_FileName)
    // Get rid of the PNG_FOLDER when we're done making the PSD file...
    remove_png_files(PNG_FOLDER)

    // Need this when called via Nuke python callback. Otherwise, Photoshop stays open.
    // That may be desirable though, in some cases...
    photoshop.quit();

	return 0
	}

// Call main function...
main()