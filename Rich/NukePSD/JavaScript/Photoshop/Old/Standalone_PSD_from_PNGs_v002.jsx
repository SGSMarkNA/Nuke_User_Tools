
// =======================================================
// Check for the OS we're on...
os = $.os.toLowerCase().indexOf('mac') >= 0 ? "MAC": "WINDOWS";
//alert(os);

// =======================================================
// Where to find various files on the server:
// Path to server...
var libPath = $.getenv("AW_COMMON_UTILITIES");
// Path to Color Settings...
var ColorSettingsPath = (libPath + "/Photoshop/AW_Nuke_Tools/Color_Settings");
// Color settings files...
var ACES_SETTINGS = (ColorSettingsPath + "/ACES-CG-Linear_NO_PROFILE_PROMPTS.csf" );
var sRGB_SETTINGS = (ColorSettingsPath + "/sRGB.csf" );

// =======================================================
// Data file, generated by python script:
if(os == "WINDOWS") {
	//var DataFile = new File($.getenv("TEMP") + "\\" + ".nuke\\NukePSD\\NukePSD_Data.txt");
	var DataFile = new File('D:\\rbobo\\Dropbox\\richbobo\\NUKE\\Scripts\\Save_PSD_From_Nuke_TESTING\\img\\PNG\\NukePSD_Data.txt');
} else if (os == "MAC") {
	//var DataFile = new File($.getenv("HOME") + "/" + ".nuke/NukePSD/NukePSD_Data.txt");
	var DataFile = new File('/Users/richbobo/Dropbox/richbobo/NUKE/Scripts/Save_PSD_From_Nuke_TESTING/img/PNG/NukePSD_Data.txt');
}
//alert(DataFile);
// Open and read lines from the data file which assign script variables...
DataFile.open('r');
var str = "";
while (!DataFile.eof) {
	str = DataFile.readln() + "\n";
	//alert(str);
	eval(str);
}
DataFile.close();
///////////////////////////////////////
//alert("PNG_FOLDER -->" + PNG_FOLDER);
//alert("LAYER_FOLDERS -->", LAYER_FOLDERS);
//alert("PSD_FileName -->" + PSD_FileName);
//alert("NUKE_FRAME -->" + NUKE_FRAME);
//alert("NUM_FRAMES -->" + NUM_FRAMES);
//var PSDName = (PSD_FileName + "_" + NUKE_FRAME);
//alert("PSDName -->" + PSDName);
//alert("FIRST_FRAME -->" + FIRST_FRAME);
//alert("LAST_FRAME -->" + LAST_FRAME);

// =======================================================
// Set to use pixels...
app.preferences.rulerUnits = Units.PIXELS
app.preferences.typeUnits = TypeUnits.PIXELS

// =======================================================
// Display no dialogs...
app.displayDialogs = DialogModes.NO

// =======================================================
// Load saved Photoshop Color Settings...
function loadColorSettings( file ) {  
     var desc = new ActionDescriptor();  
        var ref = new ActionReference();  
        ref.putProperty( charIDToTypeID('Prpr'), stringIDToTypeID('colorSettings') );  
        ref.putEnumerated( charIDToTypeID('capp'), charIDToTypeID('Ordn'), charIDToTypeID('Trgt') );  
    desc.putReference( charIDToTypeID('null'), ref );  
        var fileDesc = new ActionDescriptor();  
        fileDesc.putPath( charIDToTypeID('Usng'), file );  
    desc.putObject( charIDToTypeID('T   '), stringIDToTypeID('colorSettings'), fileDesc );  
    executeAction( charIDToTypeID('setd'), desc, DialogModes.NO );  
}; 
// Run it.
var FileName = new File (sRGB_SETTINGS); 
loadColorSettings( FileName );
//alert("Loaded 'sRGB.csf' into WORKING Color Settings...");


// =======================================================
function png_to_psd (layer_path,LAYER_FOLDERS,IMAGE_ARRAY,prefs,PSD_FileName){
	// Check if there are any pngs... if not, exit.
	if (IMAGE_ARRAY.length == 0) {return 0}

	// Create a new document...
	var newDoc = documents.add(300, 300, 72, 'Imported Layers', NewDocumentMode.RGB, DocumentFill.TRANSPARENT, 1);
	var newLayer = newDoc.activeLayer;
	var pnglayers = new Array (); // Array for holding layer info...

	// Loop through all files in the source folder...
	for (var i = 0; i < IMAGE_ARRAY.length; i++) {
		// open document
		var doc = open(IMAGE_ARRAY[i]);

		// Get document name and remove file extension...
		var name = doc.name;
		if (prefs.removeFileExtensions) {
			name = name.replace(/(?:\.[^.]*$|$)/, '');
		}

		// Convert to RGB; convert to 8-bpc; merge visible...
		doc.changeMode(ChangeMode.RGB);
		doc.bitsPerChannel = BitsPerChannelType.EIGHT;
		doc.artLayers.add();
		doc.mergeVisibleLayers();

		// Rename layer; duplicate to new document...
		var layer = doc.activeLayer;
		layer.name = name;
		layer.duplicate(newDoc, ElementPlacement.PLACEATBEGINNING);
		
		// Add layer name to  list...
		var namesplit = (name.split("_")); // Seperate file name into an array...
		pnglayers.push(namesplit.join("_")); // Add layer name to pnglayers...

		// Close imported document...
		doc.close(SaveOptions.DONOTSAVECHANGES);
	}	

	// Reveal and trim to fit all layers...
	newDoc.revealAll();
	newDoc.trim(TrimType.TRANSPARENT, true, true, true, true);
	
	var PixCount = newDoc.width.as('px') * newDoc.height.as('px');
	var layers = activeDocument.artLayers;
	var groups = activeDocument.layerSets;

	if (layers.length > 1){layers.getByName("Layer 1").remove()};

	// Save file and close...
	saveName = new File(PSD_FileName + "_" + INDEX + ".psd");
	//alert("saveName --> " + saveName);
	newDoc.saveAs(saveName, new PhotoshopSaveOptions() );
	newDoc.close();

	return saveName
	}

// =======================================================
function single_psd (layer_path,PSD_FileName,IMAGE_ARRAY){
	// user settings
	var prefs = new Object();
	prefs.sourceFolder         = layer_path;  // runs
	prefs.removeFileExtensions = true; // remove filename extensions for imported layers (default: true)
	prefs.savePrompt           = false; // display save prompt after import is complete (default: false)
	prefs.closeAfterSave       = false; // close import document after saving (default: false)

	// assemble pngs to psd
	saveName = png_to_psd(layer_path,LAYER_FOLDERS,IMAGE_ARRAY,prefs,PSD_FileName);	
	return saveName
	}

// =======================================================
// Get rid of the PNG_FOLDER when we're done making the PSD file...
function remove_png_files (LAYER_FOLDERS, PNG_FOLDER, DataFile) {

	for (var j=0; j < LAYER_FOLDERS.length; j++) {
	    if (LAYER_FOLDERS[j]) {
	    	//alert('LAYER_FOLDERS loop...')
	        var layerfolder = LAYER_FOLDERS[j];
	        //alert("layerfolder --> " + layerfolder);
	        //alert("PNG_FOLDER --> " + PNG_FOLDER);
	        var layer_path = PNG_FOLDER + '/' + layerfolder;
	        //alert("layer_path --> " + layer_path);

			if(os == "WINDOWS")
				var layer_path = new Folder(layer_path.replace(/\//g, "\\\\"));
			else if (os == "MAC")
				var layer_path = new Folder(layer_path);
			//alert("layer_path -->" + layer_path);

		    if(layer_path.exists) {
		    	//alert("Yes, it does.");
		        var removeFiles = layer_path.getFiles();
		        //alert("removeFiles -->" + removeFiles); 
		        for(var a=0; a < removeFiles.length; a++){  
		            removeFiles[a].remove();  
		        }
		    layer_path.remove();   
		    } else {
		    	//alert("Nope.");
    		}
		}
	}
	if(os == "WINDOWS") {
		var PNG_FOLDER = new Folder(PNG_FOLDER.replace(/\//g, "\\\\"));
	} else if (os == "MAC") {
		var PNG_FOLDER = new Folder(PNG_FOLDER);
	//alert("PNG_FOLDER -->" + PNG_FOLDER);
	}
	DataFile.remove();
	PNG_FOLDER.remove(); 
}

// =======================================================
function main() {

    INDEX = (FIRST_FRAME.split(".")[0]);
    INDEX = (INDEX.split("_"));
    INDEX = (INDEX [INDEX.length -1]);
    //alert(INDEX);

    for (var i=0; i < NUM_FRAMES; i++){
    	//alert('NUM_FRAMES loop...')
    	var IMAGE_PATHS = [];
    	var IMAGE_ARRAY = new Array ();

        for (var j=0; j < LAYER_FOLDERS.length; j++){
            if (LAYER_FOLDERS[j]) {
            	//alert('LAYER_FOLDERS loop...')
                var layerfolder = LAYER_FOLDERS[j];
                //alert("layerfolder --> " + layerfolder);
                var layer_path = PNG_FOLDER + '/' + layerfolder;
                //alert("layer_path --> " + layer_path);
                var image_path = layer_path + '/' + layerfolder + '_' + INDEX + '.png';
                //alert("image_path --> " + image_path);
                IMAGE_PATHS.push(image_path);
            }
        //alert("IMAGE_PATHS --> " + IMAGE_PATHS);
        }

        for (var k=0; k < IMAGE_PATHS.length; k++){
        	//alert('IMAGE_PATHS loop...')
        	if (IMAGE_PATHS[k]) {
	        	var image_file = new File(IMAGE_PATHS[k]);
	        	//alert("image_file --> " + image_file)
	        	IMAGE_ARRAY.push(image_file);
		    }
		//alert("IMAGE_ARRAY --> " + IMAGE_ARRAY);
		}
		single_psd(layer_path,PSD_FileName,IMAGE_ARRAY)

		// Increment INDEX number...
		// Format for four digits padding.
		var ZEROS = "0000";
		// Convert to number so we can increment it...
		INDEX = Number(INDEX);
		// Increment...
		INDEX++
		// Convert back to string, so we can use hack to add padding...
		INDEX = INDEX.toString();
		// Add needed number of leading zeroes...
		INDEX = ZEROS.substr(0, ZEROS.length - INDEX.length) + INDEX;
		//alert(INDEX);
	}
	// Get rid of the png files when we're done making the PSD file...
	remove_png_files(LAYER_FOLDERS, PNG_FOLDER, DataFile)

    // Need this when called via Nuke python callback. Otherwise, Photoshop stays open.
    // That may be desirable though, in some cases...
    photoshop.quit();

	return 0
}

// Run it...
main()




